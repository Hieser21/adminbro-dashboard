"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const error_1 = tslib_1.__importDefault(require("@semantic-release/error"));
const jira_1 = require("./jira");
async function verifyConditions(config, context) {
    const { networkConcurrency } = config;
    if (typeof config.jiraHost !== 'string') {
        throw new error_1.default(`config.jiraHost must be a string`);
    }
    if (typeof config.projectId !== 'string') {
        throw new error_1.default(`config.projectId must be a string`);
    }
    if (!config.ticketPrefixes && !config.ticketRegex) {
        throw new error_1.default('Either config.ticketPrefixes or config.ticketRegex must be passed');
    }
    if (config.ticketPrefixes && config.ticketRegex) {
        throw new error_1.default(`config.ticketPrefixes and config.ticketRegex cannot be passed at the same time`);
    }
    if (config.ticketPrefixes) {
        if (!Array.isArray(config.ticketPrefixes)) {
            throw new error_1.default(`config.ticketPrefixes must be an array of string`);
        }
        for (const prefix of config.ticketPrefixes) {
            if (typeof prefix !== 'string') {
                throw new error_1.default(`config.ticketPrefixes must be an array of string`);
            }
        }
    }
    if (config.ticketRegex && typeof config.ticketRegex !== 'string') {
        throw new error_1.default(`config.ticketRegex must be an string`);
    }
    if (config.releaseNameTemplate) {
        if (typeof config.releaseNameTemplate !== 'string' || config.releaseNameTemplate.indexOf('${version}') === -1) {
            throw new error_1.default('config.releaseNameTemplate must be a string containing ${version}');
        }
    }
    if (config.releaseDescriptionTemplate !== null && config.releaseDescriptionTemplate !== undefined) {
        if (typeof config.releaseDescriptionTemplate !== 'string') {
            throw new error_1.default('config.releaseDescriptionTemplate must be a string');
        }
    }
    if (networkConcurrency && (typeof networkConcurrency !== 'number' || networkConcurrency < 1)) {
        throw new error_1.default(`config.networkConcurrency must be an number greater than 0`);
    }
    if (!context.env.JIRA_AUTH && (!context.env.JIRA_TOKEN || !context.env.JIRA_EMAIL)) {
        throw new error_1.default(`you have to set environmental variables: either JIRA_AUTH or JIRA_TOKEN with JIRA_EMAIL`);
    }
    const jira = jira_1.makeClient(config, context);
    let project;
    try {
        project = await jira.project.getProject({ projectIdOrKey: config.projectId });
    }
    catch (error) {
        // tslint:disable-next-line: no-console
        console.log('We cannot connect with your JIRA host', error);
        throw error;
    }
    return project;
}
exports.verifyConditions = verifyConditions;
//# sourceMappingURL=verifyConditions.js.map