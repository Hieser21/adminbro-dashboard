{"ast":null,"code":"/* eslint-disable max-len */\n/**\n * @module @admin-bro/express\n * @subcategory Plugins\n * @section modules\n *\n * @classdesc\n * Plugin that allows you to add AdminBro to Express.js applications.\n *\n * ## Installation\n *\n * ```sh\n * npm install @admin-bro/express\n * ```\n *\n * It has 2 peerDependencies: `express-formidable` and `express`,\n * so you have to install them as well (if they are not installed already)\n *\n * ```\n * npm install express express-formidable\n * ```\n *\n * ## Usage\n *\n * ```\n * const AdminBroExpress = require('@admin-bro/express')\n * ```\n *\n * It exposes 2 methods that create an Express Router, which can be attached\n * to a given url in the API. Each method takes a pre-configured instance of {@link AdminBro}.\n *\n * - {@link module:@admin-bro/express.buildRouter AdminBroExpress.buildRouter(admin, [predefinedRouter])}\n * - {@link module:@admin-bro/express.buildAuthenticatedRouter AdminBroExpress.buildAuthenticatedRouter(admin, auth, [predefinedRouter], sessionOptions)}\n *\n * If you want to use a router you have already created - not a problem. Just pass it\n * as a `predefinedRouter` parameter.\n *\n * You may want to use this option when you want to include\n * some custom auth middleware for you AdminBro routes.\n *\n * ## Example without an authentication\n *\n * ```\n * const AdminBro = require('admin-bro')\n * const AdminBroExpress = require('@admin-bro/express')\n *\n * const express = require('express')\n * const app = express()\n *\n * const adminBro = new AdminBro({\n *   databases: [],\n *   rootPath: '/admin',\n * })\n *\n * const router = AdminBroExpress.buildRouter(adminBro)\n * app.use(adminBro.options.rootPath, router)\n * app.listen(8080, () => console.log('AdminBro is under localhost:8080/admin'))\n * ```\n *\n * ## Using build in authentication\n *\n * To protect the routes with a session authentication, you can use predefined\n * {@link module:@admin-bro/express.buildAuthenticatedRouter} method.\n *\n * Note! To use authentication in production environment, there is a need to configure\n * express-session for production build. It can be achieved by passing options to\n * `sessionOptions` parameter. Read more on [express/session Github page](https://github.com/expressjs/session)\n *\n * ## Adding custom authentication\n *\n * You can add your custom authentication setup by firstly creating the router and then\n * passing it via the `predefinedRouter` option.\n *\n * ```\n * let router = express.Router()\n * router.use((req, res, next) => {\n *   if (req.session && req.session.admin) {\n *     req.session.adminUser = req.session.admin\n *     next()\n *   } else {\n *     res.redirect(adminBro.options.loginPath)\n *   }\n * })\n * router = AdminBroExpress.buildRouter(adminBro, router)\n * ```\n *\n * Where `req.session.admin` is {@link AdminBro#CurrentAdmin},\n * meaning that it should have at least an email property.\n */\n\nvar Plugin = require('./plugin');\nmodule.exports = Plugin;","map":{"version":3,"names":["Plugin","require","module","exports"],"sources":["/workspace/adminbro-dashboard/node_modules/@admin-bro/express/index.js"],"sourcesContent":["/* eslint-disable max-len */\n/**\n * @module @admin-bro/express\n * @subcategory Plugins\n * @section modules\n *\n * @classdesc\n * Plugin that allows you to add AdminBro to Express.js applications.\n *\n * ## Installation\n *\n * ```sh\n * npm install @admin-bro/express\n * ```\n *\n * It has 2 peerDependencies: `express-formidable` and `express`,\n * so you have to install them as well (if they are not installed already)\n *\n * ```\n * npm install express express-formidable\n * ```\n *\n * ## Usage\n *\n * ```\n * const AdminBroExpress = require('@admin-bro/express')\n * ```\n *\n * It exposes 2 methods that create an Express Router, which can be attached\n * to a given url in the API. Each method takes a pre-configured instance of {@link AdminBro}.\n *\n * - {@link module:@admin-bro/express.buildRouter AdminBroExpress.buildRouter(admin, [predefinedRouter])}\n * - {@link module:@admin-bro/express.buildAuthenticatedRouter AdminBroExpress.buildAuthenticatedRouter(admin, auth, [predefinedRouter], sessionOptions)}\n *\n * If you want to use a router you have already created - not a problem. Just pass it\n * as a `predefinedRouter` parameter.\n *\n * You may want to use this option when you want to include\n * some custom auth middleware for you AdminBro routes.\n *\n * ## Example without an authentication\n *\n * ```\n * const AdminBro = require('admin-bro')\n * const AdminBroExpress = require('@admin-bro/express')\n *\n * const express = require('express')\n * const app = express()\n *\n * const adminBro = new AdminBro({\n *   databases: [],\n *   rootPath: '/admin',\n * })\n *\n * const router = AdminBroExpress.buildRouter(adminBro)\n * app.use(adminBro.options.rootPath, router)\n * app.listen(8080, () => console.log('AdminBro is under localhost:8080/admin'))\n * ```\n *\n * ## Using build in authentication\n *\n * To protect the routes with a session authentication, you can use predefined\n * {@link module:@admin-bro/express.buildAuthenticatedRouter} method.\n *\n * Note! To use authentication in production environment, there is a need to configure\n * express-session for production build. It can be achieved by passing options to\n * `sessionOptions` parameter. Read more on [express/session Github page](https://github.com/expressjs/session)\n *\n * ## Adding custom authentication\n *\n * You can add your custom authentication setup by firstly creating the router and then\n * passing it via the `predefinedRouter` option.\n *\n * ```\n * let router = express.Router()\n * router.use((req, res, next) => {\n *   if (req.session && req.session.admin) {\n *     req.session.adminUser = req.session.admin\n *     next()\n *   } else {\n *     res.redirect(adminBro.options.loginPath)\n *   }\n * })\n * router = AdminBroExpress.buildRouter(adminBro, router)\n * ```\n *\n * Where `req.session.admin` is {@link AdminBro#CurrentAdmin},\n * meaning that it should have at least an email property.\n */\n\nconst Plugin = require('./plugin')\n\nmodule.exports = Plugin\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAElCC,MAAM,CAACC,OAAO,GAAGH,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}