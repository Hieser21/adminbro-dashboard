{"ast":null,"code":"var _slicedToArray = require(\"/home/gitpod/.nvm/versions/node/v16.19.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _regeneratorRuntime = require(\"/home/gitpod/.nvm/versions/node/v16.19.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/home/gitpod/.nvm/versions/node/v16.19.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/home/gitpod/.nvm/versions/node/v16.19.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar express = require('express');\nvar AdminBro = require('admin-bro');\nvar path = require('path');\nvar formidableMiddleware = require('express-formidable');\nvar pkg = require('./package.json');\nvar session;\ntry {\n  session = require('express-session'); // eslint-disable-line global-require\n} catch (e) {\n  console.info('express-session was not required');\n}\n\n/**\n * Builds the Express Router that handles all the pages and assets\n *\n * @param  {AdminBro} admin                       instance of AdminBro\n * @param  {express.Router} [predefinedRouter]    Express.js router\n * @param  {ExpressFormidableOptions} [formidableOptions]    Express.js router\n * @return {express.Router}                       Express.js router\n * @function\n * @static\n * @memberof module:@admin-bro/express\n */\nvar buildRouter = function buildRouter(admin, predefinedRouter, formidableOptions) {\n  if (!admin || admin.constructor.name !== 'AdminBro') {\n    var e = new Error('you have to pass an instance of AdminBro to the buildRouter() function');\n    e.name = 'WrongArgumentError';\n    throw e;\n  }\n  admin.initialize().then(function () {\n    console.log('AdminBro: bundle ready');\n  });\n  var _AdminBro$Router = AdminBro.Router,\n    routes = _AdminBro$Router.routes,\n    assets = _AdminBro$Router.assets;\n  var router = predefinedRouter || express.Router();\n  router.use(formidableMiddleware(formidableOptions));\n  routes.forEach(function (route) {\n    // we have to change routes defined in AdminBro from {recordId} to :recordId\n    var expressPath = route.path.replace(/{/g, ':').replace(/}/g, '');\n    /**\n     * @type {express.Handler}\n     */\n    var handler = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {\n        var controller, params, query, method, payload, html;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              controller = new route.Controller({\n                admin: admin\n              }, req.session && req.session.adminUser);\n              params = req.params, query = req.query;\n              method = req.method.toLowerCase();\n              payload = _objectSpread(_objectSpread({}, req.fields || {}), req.files || {});\n              _context.next = 7;\n              return controller[route.action](_objectSpread(_objectSpread({}, req), {}, {\n                params: params,\n                query: query,\n                payload: payload,\n                method: method\n              }), res);\n            case 7:\n              html = _context.sent;\n              if (route.contentType) {\n                res.set({\n                  'Content-Type': route.contentType\n                });\n              }\n              if (html) {\n                res.send(html);\n              }\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              next(_context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n      return function handler(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    if (route.method === 'GET') {\n      router.get(expressPath, handler);\n    }\n    if (route.method === 'POST') {\n      router.post(expressPath, handler);\n    }\n  });\n  assets.forEach(function (asset) {\n    router.get(asset.path, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              res.sendFile(path.resolve(asset.src));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x4, _x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n  return router;\n};\n\n/**\n * @typedef {Function} Authenticate\n * @memberof module:@admin-bro/express\n * @description\n * function taking 2 arguments email and password\n * @param {string} [email]         email given in the form\n * @param {string} [password]      password given in the form\n * @return {CurrentAdmin | null}      returns current admin or null\n */\n\n/**\n * Builds the Express Router which is protected by a session auth\n *\n * Using the router requires you to install `express-session` as a\n * dependency. Normally express-session holds session in memory, which is\n * not optimized for production usage and, in development, it causes\n * logging out after every page refresh (if you use nodemon).\n *\n * @param  {AdminBro} admin                    instance of AdminBro\n * @param  {Object} auth                          authentication options\n * @param  {module:@admin-bro/express.Authenticate} auth.authenticate       authenticate function\n * @param  {String} auth.cookiePassword           secret used to encrypt cookies\n * @param  {String} auth.cookieName=adminbro      cookie name\n * @param  {express.Router} [predefinedRouter]    Express.js router\n * @param  {SessionOptions} [sessionOptions]     Options that are passed to [express-session](https://github.com/expressjs/session)\n * @param  {ExpressFormidableOptions} [formidableOptions]     Options that are passed to [express-session](https://github.com/expressjs/session)\n * @return {express.Router}                       Express.js router\n * @static\n * @memberof module:@admin-bro/express\n * @example\n * const ADMIN = {\n *   email: 'test@example.com',\n *   password: 'password',\n * }\n *\n * AdminBroExpress.buildAuthenticatedRouter(adminBro, {\n *   authenticate: async (email, password) => {\n *     if (ADMIN.password === password && ADMIN.email === email) {\n *       return ADMIN\n *     }\n *     return null\n *   },\n *   cookieName: 'adminbro',\n *   cookiePassword: 'somePassword',\n * }, [router])\n */\nvar buildAuthenticatedRouter = function buildAuthenticatedRouter(admin, auth, predefinedRouter) {\n  var sessionOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var formidableOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (!session) {\n    throw new Error(['In order to use authentication, you have to install', ' express-session package'].join(' '));\n  }\n  var router = predefinedRouter || express.Router();\n  router.use(function (req, res, next) {\n    if (req._body) {\n      next(new Error(['You probably used old `body-parser` middleware, which is not compatible', 'with admin-bro-expressjs. In order to make it work you will have to', '1. move body-parser invocation after the admin bro setup like this:', 'const adminBro = new AdminBro()', 'const router = new buildRouter(adminBro)', 'app.use(adminBro.options.rootPath, router)', '// body parser goes after the AdminBro router', 'app.use(bodyParser())', '2. Upgrade body-parser to the latest version and use it like this:', 'app.use(bodyParser.json())'].join('\\n')));\n    }\n    next();\n  });\n  router.use(session(_objectSpread(_objectSpread({}, sessionOptions), {}, {\n    secret: auth.cookiePassword,\n    name: auth.cookieName || 'adminbro'\n  })));\n  router.use(formidableMiddleware(formidableOptions));\n  var rootPath = admin.options.rootPath;\n  var _admin$options = admin.options,\n    loginPath = _admin$options.loginPath,\n    logoutPath = _admin$options.logoutPath;\n  // since we are inside already namespaced router we have to replace login and logout routes that\n  // they don't have rootUrl inside. So changing /admin/login to just /login.\n  // but there is a case where user gives / as a root url and /login becomes `login`. We have to\n  // fix it by adding / in front of the route\n  loginPath = loginPath.replace(rootPath, '');\n  if (!loginPath.startsWith('/')) {\n    loginPath = \"/\".concat(loginPath);\n  }\n  logoutPath = logoutPath.replace(rootPath, '');\n  if (!logoutPath.startsWith('/')) {\n    logoutPath = \"/\".concat(logoutPath);\n  }\n  router.get(loginPath, /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n      var login;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return admin.renderLogin({\n              action: admin.options.loginPath,\n              errorMessage: null\n            });\n          case 2:\n            login = _context3.sent;\n            res.send(login);\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  router.post(loginPath, /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next) {\n      var _req$fields, email, password, adminUser, login;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _req$fields = req.fields, email = _req$fields.email, password = _req$fields.password;\n            _context4.next = 3;\n            return auth.authenticate(email, password);\n          case 3:\n            adminUser = _context4.sent;\n            if (!adminUser) {\n              _context4.next = 9;\n              break;\n            }\n            req.session.adminUser = adminUser;\n            req.session.save(function (err) {\n              if (err) {\n                next(err);\n              }\n              if (req.session.redirectTo) {\n                res.redirect(req.session.redirectTo);\n              } else {\n                res.redirect(rootPath);\n              }\n            });\n            _context4.next = 13;\n            break;\n          case 9:\n            _context4.next = 11;\n            return admin.renderLogin({\n              action: admin.options.loginPath,\n              errorMessage: 'invalidCredentials'\n            });\n          case 11:\n            login = _context4.sent;\n            res.send(login);\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x8, _x9, _x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  router.use(function (req, res, next) {\n    if (AdminBro.Router.assets.find(function (asset) {\n      return req.originalUrl.match(asset.path);\n    })) {\n      next();\n    } else if (req.session.adminUser\n    // these routes doesn't need authentication\n    || req.originalUrl.startsWith(admin.options.loginPath) || req.originalUrl.startsWith(admin.options.logoutPath)) {\n      next();\n    } else {\n      // If the redirection is caused by API call to some action just redirect to resource\n      var _req$originalUrl$spli = req.originalUrl.split('/actions'),\n        _req$originalUrl$spli2 = _slicedToArray(_req$originalUrl$spli, 1),\n        redirectTo = _req$originalUrl$spli2[0];\n      req.session.redirectTo = redirectTo.includes(\"\".concat(rootPath, \"/api\")) ? rootPath : redirectTo;\n      req.session.save(function (err) {\n        if (err) {\n          next(err);\n        }\n        res.redirect(admin.options.loginPath);\n      });\n    }\n  });\n  router.get(logoutPath, /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            req.session.destroy(function () {\n              res.redirect(admin.options.loginPath);\n            });\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return function (_x11, _x12) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n  return buildRouter(admin, router, formidableOptions);\n};\nmodule.exports = {\n  buildRouter: buildRouter,\n  buildAuthenticatedRouter: buildAuthenticatedRouter,\n  /**\n   * Version of the plugin\n   * @static\n   * @memberof module:@admin-bro/express\n   */\n  version: pkg.version,\n  /**\n   * Plugin name\n   * @static\n   * @memberof module:@admin-bro/express\n   */\n  name: 'AdminBroExpressjs'\n};","map":{"version":3,"names":["express","require","AdminBro","path","formidableMiddleware","pkg","session","e","console","info","buildRouter","admin","predefinedRouter","formidableOptions","constructor","name","Error","initialize","then","log","_AdminBro$Router","Router","routes","assets","router","use","forEach","route","expressPath","replace","handler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","res","next","controller","params","query","method","payload","html","wrap","_callee$","_context","prev","Controller","adminUser","toLowerCase","_objectSpread","fields","files","action","sent","contentType","set","send","t0","stop","_x","_x2","_x3","apply","arguments","get","post","asset","_ref2","_callee2","_callee2$","_context2","sendFile","resolve","src","_x4","_x5","buildAuthenticatedRouter","auth","sessionOptions","length","undefined","join","_body","secret","cookiePassword","cookieName","rootPath","options","_admin$options","loginPath","logoutPath","startsWith","concat","_ref3","_callee3","login","_callee3$","_context3","renderLogin","errorMessage","_x6","_x7","_ref4","_callee4","_req$fields","email","password","_callee4$","_context4","authenticate","save","err","redirectTo","redirect","_x8","_x9","_x10","find","originalUrl","match","_req$originalUrl$spli","split","_req$originalUrl$spli2","_slicedToArray","includes","_ref5","_callee5","_callee5$","_context5","destroy","_x11","_x12","module","exports","version"],"sources":["/workspace/adminbro-dashboard/node_modules/@admin-bro/express/plugin.js"],"sourcesContent":["const express = require('express')\nconst AdminBro = require('admin-bro')\n\nconst path = require('path')\nconst formidableMiddleware = require('express-formidable')\n\nconst pkg = require('./package.json')\n\nlet session\n\ntry {\n  session = require('express-session') // eslint-disable-line global-require\n} catch (e) {\n  console.info('express-session was not required')\n}\n\n/**\n * Builds the Express Router that handles all the pages and assets\n *\n * @param  {AdminBro} admin                       instance of AdminBro\n * @param  {express.Router} [predefinedRouter]    Express.js router\n * @param  {ExpressFormidableOptions} [formidableOptions]    Express.js router\n * @return {express.Router}                       Express.js router\n * @function\n * @static\n * @memberof module:@admin-bro/express\n */\nconst buildRouter = (admin, predefinedRouter, formidableOptions) => {\n  if (!admin || admin.constructor.name !== 'AdminBro') {\n    const e = new Error('you have to pass an instance of AdminBro to the buildRouter() function')\n    e.name = 'WrongArgumentError'\n    throw e\n  }\n\n  admin.initialize().then(() => {\n    console.log('AdminBro: bundle ready')\n  })\n\n  const { routes, assets } = AdminBro.Router\n  const router = predefinedRouter || express.Router()\n\n  router.use(formidableMiddleware(formidableOptions))\n\n  routes.forEach((route) => {\n    // we have to change routes defined in AdminBro from {recordId} to :recordId\n    const expressPath = route.path.replace(/{/g, ':').replace(/}/g, '')\n    /**\n     * @type {express.Handler}\n     */\n    const handler = async (req, res, next) => {\n      try {\n        const controller = new route.Controller({ admin }, req.session && req.session.adminUser)\n        const { params, query } = req\n        const method = req.method.toLowerCase()\n        const payload = {\n          ...(req.fields || {}),\n          ...(req.files || {}),\n        }\n        const html = await controller[route.action]({\n          ...req,\n          params,\n          query,\n          payload,\n          method,\n        }, res)\n        if (route.contentType) {\n          res.set({ 'Content-Type': route.contentType })\n        }\n        if (html) {\n          res.send(html)\n        }\n      } catch (e) {\n        next(e)\n      }\n    }\n\n    if (route.method === 'GET') {\n      router.get(expressPath, handler)\n    }\n\n    if (route.method === 'POST') {\n      router.post(expressPath, handler)\n    }\n  })\n\n  assets.forEach((asset) => {\n    router.get(asset.path, async (req, res) => {\n      res.sendFile(path.resolve(asset.src))\n    })\n  })\n\n  return router\n}\n\n/**\n * @typedef {Function} Authenticate\n * @memberof module:@admin-bro/express\n * @description\n * function taking 2 arguments email and password\n * @param {string} [email]         email given in the form\n * @param {string} [password]      password given in the form\n * @return {CurrentAdmin | null}      returns current admin or null\n */\n\n/**\n * Builds the Express Router which is protected by a session auth\n *\n * Using the router requires you to install `express-session` as a\n * dependency. Normally express-session holds session in memory, which is\n * not optimized for production usage and, in development, it causes\n * logging out after every page refresh (if you use nodemon).\n *\n * @param  {AdminBro} admin                    instance of AdminBro\n * @param  {Object} auth                          authentication options\n * @param  {module:@admin-bro/express.Authenticate} auth.authenticate       authenticate function\n * @param  {String} auth.cookiePassword           secret used to encrypt cookies\n * @param  {String} auth.cookieName=adminbro      cookie name\n * @param  {express.Router} [predefinedRouter]    Express.js router\n * @param  {SessionOptions} [sessionOptions]     Options that are passed to [express-session](https://github.com/expressjs/session)\n * @param  {ExpressFormidableOptions} [formidableOptions]     Options that are passed to [express-session](https://github.com/expressjs/session)\n * @return {express.Router}                       Express.js router\n * @static\n * @memberof module:@admin-bro/express\n * @example\n * const ADMIN = {\n *   email: 'test@example.com',\n *   password: 'password',\n * }\n *\n * AdminBroExpress.buildAuthenticatedRouter(adminBro, {\n *   authenticate: async (email, password) => {\n *     if (ADMIN.password === password && ADMIN.email === email) {\n *       return ADMIN\n *     }\n *     return null\n *   },\n *   cookieName: 'adminbro',\n *   cookiePassword: 'somePassword',\n * }, [router])\n */\nconst buildAuthenticatedRouter = (\n  admin,\n  auth,\n  predefinedRouter,\n  sessionOptions = {},\n  formidableOptions = {},\n) => {\n  if (!session) {\n    throw new Error(['In order to use authentication, you have to install',\n      ' express-session package',\n    ].join(' '))\n  }\n  const router = predefinedRouter || express.Router()\n\n  router.use((req, res, next) => {\n    if (req._body) {\n      next(new Error([\n        'You probably used old `body-parser` middleware, which is not compatible',\n        'with admin-bro-expressjs. In order to make it work you will have to',\n        '1. move body-parser invocation after the admin bro setup like this:',\n\n        'const adminBro = new AdminBro()',\n        'const router = new buildRouter(adminBro)',\n        'app.use(adminBro.options.rootPath, router)',\n\n        '// body parser goes after the AdminBro router',\n        'app.use(bodyParser())',\n\n        '2. Upgrade body-parser to the latest version and use it like this:',\n        'app.use(bodyParser.json())',\n      ].join('\\n')))\n    }\n    next()\n  })\n\n  router.use(session({\n    ...sessionOptions,\n    secret: auth.cookiePassword,\n    name: auth.cookieName || 'adminbro',\n  }))\n\n  router.use(formidableMiddleware(formidableOptions))\n\n  const { rootPath } = admin.options\n  let { loginPath, logoutPath } = admin.options\n  // since we are inside already namespaced router we have to replace login and logout routes that\n  // they don't have rootUrl inside. So changing /admin/login to just /login.\n  // but there is a case where user gives / as a root url and /login becomes `login`. We have to\n  // fix it by adding / in front of the route\n  loginPath = loginPath.replace(rootPath, '')\n  if (!loginPath.startsWith('/')) { loginPath = `/${loginPath}` }\n\n  logoutPath = logoutPath.replace(rootPath, '')\n  if (!logoutPath.startsWith('/')) { logoutPath = `/${logoutPath}` }\n\n  router.get(loginPath, async (req, res) => {\n    const login = await admin.renderLogin({\n      action: admin.options.loginPath,\n      errorMessage: null,\n    })\n    res.send(login)\n  })\n\n  router.post(loginPath, async (req, res, next) => {\n    const { email, password } = req.fields\n    const adminUser = await auth.authenticate(email, password)\n    if (adminUser) {\n      req.session.adminUser = adminUser\n      req.session.save((err) => {\n        if (err) {\n          next(err)\n        }\n        if (req.session.redirectTo) {\n          res.redirect(req.session.redirectTo)\n        } else {\n          res.redirect(rootPath)\n        }\n      })\n    } else {\n      const login = await admin.renderLogin({\n        action: admin.options.loginPath,\n        errorMessage: 'invalidCredentials',\n      })\n      res.send(login)\n    }\n  })\n\n  router.use((req, res, next) => {\n    if (AdminBro.Router.assets.find(asset => req.originalUrl.match(asset.path))) {\n      next()\n    } else if (req.session.adminUser\n      // these routes doesn't need authentication\n      || req.originalUrl.startsWith(admin.options.loginPath)\n      || req.originalUrl.startsWith(admin.options.logoutPath)\n    ) {\n      next()\n    } else {\n      // If the redirection is caused by API call to some action just redirect to resource\n      const [redirectTo] = req.originalUrl.split('/actions')\n      req.session.redirectTo = redirectTo.includes(`${rootPath}/api`) ? rootPath : redirectTo\n      req.session.save((err) => {\n        if (err) {\n          next(err)\n        }\n        res.redirect(admin.options.loginPath)\n      })\n    }\n  })\n\n  router.get(logoutPath, async (req, res) => {\n    req.session.destroy(() => {\n      res.redirect(admin.options.loginPath)\n    })\n  })\n\n  return buildRouter(admin, router, formidableOptions)\n}\n\nmodule.exports = {\n  buildRouter,\n  buildAuthenticatedRouter,\n  /**\n   * Version of the plugin\n   * @static\n   * @memberof module:@admin-bro/express\n   */\n  version: pkg.version,\n  /**\n   * Plugin name\n   * @static\n   * @memberof module:@admin-bro/express\n   */\n  name: 'AdminBroExpressjs',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}